/** Демонстрация низкоуровнего типа в действии*/
class Gen<T> {
    T ob; //Объявить объект типа Т
    // Передать конструктору ссылку на объект типа Т
    Gen(T o) {
        ob = o;
    }
    // Возвратить ob
    T getOb() {
        return ob;
    }
}

//Использование низкоуровнего типа
class RawDemo {
    public static void main(String[] args) {
        //Создать объект Gen для объектов Integer
        Gen<Integer> iOb = new Gen<Integer>(88);

        //Создать объект Gen для объектов String 
        Gen<String> sOb = new Gen<String>("aaaa88");

        //Создать низкоуровневый объект Gen и предоставить ему значение Double 
        Gen raw = new Gen(Double.valueOf(98.8));

        // Приведение здесь обязательно потому что тип неизвесен
        double d = (Double) raw.getOb();
        System.out.println("Значение: " + d);

        // Использование низкоуровнего типа может стать причиной
        // генерации исключений во время выполнения
        // вот несколько примеров
        //
        // следущее приведение вызывает ошибку во время выполнения!
        // int i = (Integer) raw.getOb(); // ошибка во время выполнения
        //
        // Это присваивание обходит механизм безопасности типов
     //strOb = raw; // Нормально но потенциально неправильно
        // String str = strOb.getOb(); //ошибка во время выполнения

        // Это приваивание обходит механизм безопасности типов
     //raw = iOb; // НОрмально но потенциально неправильн.о
        // d = (Double) raw.getOb(); // ошибка во время выполнения
        //
    }
}
